{"version":3,"file":"item-JlvXiD2w.js","sources":["../../packages/toggle/src/item.tsx"],"sourcesContent":["import React from 'react';\nimport { toggle as ccToggle } from '@warp-ds/css/component-classes';\nimport { useId } from '../../utils/src/index.js';\nimport { ToggleEntry } from './props.js';\n\ninterface ItemProps extends Pick<HTMLInputElement, 'type' | 'name'> {\n  controlled: boolean;\n  option?: ToggleEntry;\n  children?: React.ReactNode;\n  indeterminate?: boolean;\n  checked?: boolean;\n  value?: string; // value for dead toggle\n  defaultChecked?: boolean;\n  invalid?: boolean;\n  helpId?: string;\n  noVisibleLabel?: boolean;\n  label?: string;\n  className?: string;\n  labelClassName?: string;\n  inputClassName?: string;\n  groupClassName?: string;\n  multiple?: boolean,\n  onChange: (data: ToggleEntry | boolean) => void;\n}\n\nexport function Item({\n  controlled,\n  option,\n  children,\n  label,\n  invalid,\n  value,\n  helpId,\n  indeterminate = false,\n  checked,\n  defaultChecked,\n  noVisibleLabel,\n  labelClassName,\n  inputClassName,\n  groupClassName,\n  multiple,\n  ...props\n}: ItemProps) {\n  const id = useId();\n  const checkboxRef = React.useRef<HTMLInputElement | null>(null);\n\n  const labelContent = !children ? label || option?.label : children;\n\n  React.useEffect(() => {\n    if (!checkboxRef.current) {\n      return;\n    }\n    // 'indeterminate' state of checkbox cannot be assigned via HTML: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#indeterminate_state_checkboxes\n    checkboxRef.current.indeterminate = indeterminate;\n  }, [indeterminate, checkboxRef]);\n\n  const Item = (\n    <>\n      <input\n        ref={checkboxRef}\n        id={id}\n        checked={controlled ? checked : undefined}\n        defaultChecked={defaultChecked}\n        aria-invalid={invalid}\n        aria-errormessage={invalid ? helpId : undefined}\n        value={label ? undefined : value ?? undefined}\n        className={inputClassName}\n        {...props}\n        onChange={(e) =>\n          props.onChange(\n            label\n              ? e.target.checked\n              : option\n              ? { label: option?.label, value: option?.value }\n              : false,\n          )\n        }\n      />\n\n      <label htmlFor={id} className={labelClassName}>\n        {noVisibleLabel ? (\n          <span className={ccToggle.a11y}>{labelContent}</span>\n        ) : labelContent\n        }\n      </label>\n    </>\n  );\n\n  if (multiple ) {\n    return <div className={groupClassName}>{Item}</div>\n  }\n\n  return Item;\n\n}\n"],"names":["Item","controlled","option","children","label","invalid","value","helpId","indeterminate","checked","defaultChecked","noVisibleLabel","labelClassName","inputClassName","groupClassName","multiple","props","id","useId","checkboxRef","React","labelContent","Item2","jsxs","Fragment","jsx","e","ccToggle"],"mappings":"+HAyBO,SAAAA,EAAA,CAAc,WAAAC,EACnB,OAAAC,EACA,SAAAC,EACA,MAAAC,EACA,QAAAC,EACA,MAAAC,EACA,OAAAC,EACA,cAAAC,EAAA,GACgB,QAAAC,EAChB,eAAAC,EACA,eAAAC,EACA,eAAAC,EACA,eAAAC,EACA,eAAAC,EACA,SAAAC,EACA,GAAAC,CAEF,EAAA,CACE,MAAAC,EAAAC,IACAC,EAAAC,EAAA,OAAA,IAAA,EAEAC,EAAAlB,GAAAC,IAAAF,GAAA,YAAAA,EAAA,OAEAkB,EAAA,UAAA,IAAA,CACED,EAAA,UAIAA,EAAA,QAAA,cAAAX,EAAoC,EAAA,CAAAA,EAAAW,CAAA,CAAA,EAGtC,MAAAG,EAAAC,EAAAA,KAAAC,EAAA,SAAA,CAAA,SAAA,CAEIC,EAAA,IAAA,QAAC,CAAA,IAAAN,EACM,GAAAF,EACL,QAAAhB,EAAAQ,EAAA,OACgC,eAAAC,EAChC,eAAAL,EACc,oBAAAA,EAAAE,EAAA,OACwB,MAAAH,EAAA,OAAAE,GAAA,OACF,UAAAO,EACzB,GAAAG,EACP,SAAAU,GAAAV,EAAA,SAEIZ,EAAAsB,EAAA,OAAA,QAAAxB,EAAA,CAAA,MAAAA,GAAA,YAAAA,EAAA,MAAA,MAAAA,GAAA,YAAAA,EAAA,KAAA,EAAA,EAKA,CACN,CAAA,EAEJuB,MAAA,QAAA,CAAA,QAAAR,EAAA,UAAAL,EAAA,SAAAD,EAAAc,EAAAA,IAAA,OAAA,CAAA,UAAAE,EAAA,KAAA,SAAAN,CAAA,CAAA,EAAAA,EAAA,CAOA,CAAA,CAAA,EAIJ,OAAAN,EACEU,EAAAA,IAAA,MAAA,CAAA,UAAAX,EAAA,SAAAQ,CAAA,CAAA,EAGFA,CAEF"}