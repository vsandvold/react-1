{"version":3,"file":"Combobox.stories-d5a600c1.js","sources":["../../packages/combobox/src/utils.ts","../../packages/combobox/src/locales/en/messages.mjs","../../packages/combobox/src/locales/nb/messages.mjs","../../packages/combobox/src/locales/fi/messages.mjs","../../packages/combobox/src/component.tsx"],"sourcesContent":["import { generateId } from '../../utils/src/useId.js';\nimport { ComboboxOption, OptionWithIdAndMatch } from './props.js';\nimport { i18n } from '@lingui/core';\n\n// Add id and match to the object\nexport function createOptionsWithIdAndMatch(\n  options: ComboboxOption[],\n  currentInputValue: string\n): OptionWithIdAndMatch[] {\n  return options.map((option) => ({\n    ...option,\n    id: generateId(),\n    currentInputValue,\n  }));\n}\n\nexport function getAriaText(options: OptionWithIdAndMatch[], value: string) {\n  if (!options) return;\n\n  const filteredOptionsByInputValue = options.filter((option) =>\n    option.value.toLowerCase().includes(value.toLowerCase())\n  );\n\n  const pluralResults = i18n._(\n    /*i18n*/ {\n      id: 'combobox.aria.pluralResults',\n      message: '{numResults, plural, one {# result} other {# results}}',\n      comment: 'Aria text for combobox when one or more results',\n      values: { numResults: filteredOptionsByInputValue.length },\n    }\n  );\n\n  const noResults = i18n._(\n    /*i18n*/ {\n      id: 'combobox.aria.noResults',\n      message: 'No results.....',\n      comment: 'Aria text for combobox when no results',\n    }\n  );\n\n  return filteredOptionsByInputValue.length ? pluralResults : noResults;\n}\n","/*eslint-disable*/export const messages=JSON.parse(\"{\\\"combobox.aria.pluralResults\\\":[[\\\"numResults\\\",\\\"plural\\\",{\\\"one\\\":[\\\"#\\\",\\\" result\\\"],\\\"other\\\":[\\\"#\\\",\\\" results\\\"]}]],\\\"combobox.aria.noResults\\\":\\\"No results\\\"}\");","/*eslint-disable*/export const messages=JSON.parse(\"{\\\"combobox.aria.pluralResults\\\":[[\\\"numResults\\\",\\\"plural\\\",{\\\"one\\\":[\\\"#\\\",\\\" resultat\\\"],\\\"other\\\":[\\\"#\\\",\\\" resultater\\\"]}]],\\\"combobox.aria.noResults\\\":\\\"Ingen resultater\\\"}\");","/*eslint-disable*/export const messages=JSON.parse(\"{\\\"combobox.aria.pluralResults\\\":[[\\\"numResults\\\",\\\"plural\\\",{\\\"one\\\":[\\\"#\\\",\\\" tulos\\\"],\\\"other\\\":[\\\"#\\\",\\\" tulosta\\\"]}]],\\\"combobox.aria.noResults\\\":\\\"Ei tuloksia\\\"}\");","import { classNames } from '@chbphone55/classnames';\nimport React, {\n  ChangeEvent,\n  Dispatch,\n  FocusEvent,\n  forwardRef,\n  MutableRefObject,\n  ReactNode,\n  SetStateAction,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { combobox as ccCombobox } from '@warp-ds/css/component-classes';\nimport { TextField } from '../../textfield/src/index.js';\nimport { useId } from '../../utils/src/index.js';\nimport { ComboboxProps, OptionWithIdAndMatch } from './props.js';\nimport { createOptionsWithIdAndMatch, getAriaText } from './utils.js';\nimport { messages as enMessages} from './locales/en/messages.mjs';\nimport { messages as nbMessages} from './locales/nb/messages.mjs';\nimport { messages as fiMessages} from './locales/fi/messages.mjs';\nimport { activateI18n } from '../../i18n.js';\n\nconst OPTION_CLASS_NAME = 'w-react-combobox-option';\nconst MATCH_SEGMENTS_CLASS_NAME = 'w-react-combobox-match';\n\nexport const Combobox = forwardRef<HTMLInputElement, ComboboxProps>(\n  ({ id: pid, ...props }, forwardRef) => {\n    const id = useId(pid);\n    const listboxId = `${id}-listbox`;\n    const inputRef = useRef<HTMLInputElement | null>(null);\n    const inputContainerRef = useRef<HTMLDivElement | null>(null);\n    const containerRef = useRef<HTMLDivElement | null>(null);\n\n    activateI18n(enMessages, nbMessages, fiMessages);\n\n    // Options list open boolean\n    const [isOpen, setOpen] = useState(false);\n\n    // The option the user has navigated to with their keyboard\n    const [navigationOption, setNavigationOption] =\n      useState<OptionWithIdAndMatch | null>(null);\n\n    // Available options based on user's input value\n    const [currentOptions, setCurrentOptions] = useState<\n      OptionWithIdAndMatch[]\n    >([]);\n\n    // Destructure props\n    const {\n      options,\n      value,\n      label,\n      invalid,\n      helpText,\n      placeholder,\n      openOnFocus,\n      selectOnBlur = true,\n      className,\n      listClassName,\n      disableStaticFiltering = false,\n      matchTextSegments,\n      children,\n      highlightValueMatch,\n      onSelect,\n      onChange,\n      onFocus,\n      onBlur,\n      optional,\n      ...rest\n    } = props;\n\n    const navigationValueOrInputValue = navigationOption?.value || value;\n\n    // Set and filter available options based on user input\n    useEffect(() => {\n      setCurrentOptions(\n        createOptionsWithIdAndMatch(options, value).filter((option) =>\n          !disableStaticFiltering\n            ? option.value.toLocaleLowerCase().includes(value.toLowerCase())\n            : true,\n        ),\n      );\n\n      // eslint-disable-next-line\n    }, [options, disableStaticFiltering]);\n\n    useEffect(() => {\n      if (\n        disableStaticFiltering &&\n        currentOptions.length &&\n        currentOptions.length === 1 &&\n        !currentOptions.some((o) => o.value === value)\n      ) {\n        setOpen(true);\n      }\n    }, [currentOptions, value, disableStaticFiltering]);\n\n    function handlekeyDown(e: KeyboardEvent) {\n      const isNavigationKey = [\n        'ArrowDown',\n        'ArrowUp',\n        'PageUp',\n        'PageDown',\n        'Home',\n        'End',\n      ].includes(e.key);\n\n      const ignoreList = ['ArrowDown', 'ArrowLeft', 'ArrowUp', 'ArrowRight'];\n\n      if (isNavigationKey && !isOpen) {\n        return setOpen(true);\n      } else if (isNavigationKey && isOpen) {\n        findAndSetActiveOption(e, {\n          setNavigationOption,\n          navigationOption,\n          currentOptions,\n        });\n      } else if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) {\n        return;\n      }\n\n      // Other keys\n      switch (e.key) {\n        case 'Enter':\n          if (navigationOption) {\n            // Handle Enter only when option is selected, otherwise let the event\n            // bubble up to any enclosing form elements etc.\n            e.preventDefault();\n            handleSelect(navigationOption);\n          }\n          setOpen(false);\n          break;\n        case 'Tab':\n        case 'Delete':\n          // Dismiss the popover\n          setOpen(false);\n          break;\n        case 'Escape':\n          if (isOpen) {\n            // Dismiss the popover if visible\n            setOpen(false);\n          } else {\n            // Clear the combobox if popover is hidden\n            onChange('');\n          }\n          setNavigationOption(null);\n          break;\n        case 'Backspace':\n          onChange(navigationValueOrInputValue);\n          setNavigationOption(null);\n          setOpen(true);\n          break;\n        default:\n          if (ignoreList.includes(e.key)) {\n            break;\n          }\n\n          setOpen(true);\n          if (navigationOption) {\n            onChange(navigationOption.value);\n            setNavigationOption(null);\n          } else {\n            onChange(value);\n          }\n          break;\n      }\n    }\n\n    useEffect(() => {\n      if (!inputRef.current) return;\n      const input = inputRef.current;\n\n      input.addEventListener('keydown', handlekeyDown);\n      return () => {\n        input.removeEventListener('keydown', handlekeyDown);\n      };\n    });\n\n    function handleSelect(option: OptionWithIdAndMatch) {\n      onSelect && onSelect(option.value); // this may trigger an external api call\n      setOpen(false);\n      setNavigationOption(null);\n\n      // Set empty states on select and clear when dynamic list\n      if (disableStaticFiltering) {\n        setCurrentOptions([]);\n      }\n    }\n\n    const TextFieldProps = {\n      id,\n      value: navigationValueOrInputValue,\n      label,\n      optional,\n      invalid,\n      helpText,\n      placeholder,\n      role: 'combobox',\n      'aria-label': props['aria-label'],\n      'aria-labelledby': props['aria-labelledby'],\n      'aria-autocomplete': 'list',\n      'aria-expanded': isOpen && currentOptions.length !== 0,\n      'aria-activedescendant': isOpen ? navigationOption?.id : undefined,\n      'aria-controls': listboxId,\n      onChange: function (e: ChangeEvent<HTMLInputElement>) {\n        onChange(e.target.value);\n      },\n      onFocus: function () {\n        if (!openOnFocus) return;\n        onFocus && onFocus();\n        setOpen(true);\n      },\n      onBlur: function (e: FocusEvent) {\n        handleInputBlur(containerRef, inputContainerRef, e, setOpen);\n\n        // If user has navigated to an option on blur || the input value equals one of the options' value -> select value\n        selectOnBlur &&\n          (navigationOption ||\n            (!navigationOption &&\n              currentOptions.findIndex((o) => o.value === value) !== -1)) &&\n          onSelect &&\n          onSelect(navigationOption?.value || value);\n        setNavigationOption(null);\n        onBlur && onBlur(navigationValueOrInputValue);\n      },\n      ref: function (node: HTMLInputElement) {\n        inputRef.current = node;\n        if (forwardRef) {\n          if (typeof forwardRef === 'function') {\n            forwardRef(node);\n          } else {\n            forwardRef.current = node;\n          }\n        }\n      },\n      ...rest,\n    };\n\n    return (\n      <div\n        className={classNames(className, ccCombobox.wrapper)}\n        onBlur={(e) => handleContainerBlur(e, setOpen)}\n        ref={containerRef}\n      >\n        <div ref={inputContainerRef}>\n          {children ? (\n            // @ts-ignore\n            <TextField {...TextFieldProps}>{children}</TextField>\n          ) : (\n            // @ts-ignore\n            <TextField {...TextFieldProps} />\n          )}\n        </div>\n\n        <span className={ccCombobox.a11y} role=\"status\">\n          {getAriaText(currentOptions, value)}\n        </span>\n\n        <div\n          hidden={!isOpen || !currentOptions.length}\n          className={classNames(\n            listClassName,\n            ccCombobox.combobox,\n          )}\n          style={{\n            zIndex: 3, // Force popover above misc. page content (mobile safari issue)\n          }}\n        >\n          <ul\n            id={listboxId}\n            role=\"listbox\"\n            className={classNames(ccCombobox.listbox, {\n              [MATCH_SEGMENTS_CLASS_NAME]: matchTextSegments,\n            })}\n          >\n            {currentOptions.map((option) => {\n              const display = option.label || option.value;\n              let match: ReactNode = [];\n\n              if (matchTextSegments && !highlightValueMatch) {\n                const startIdx = display\n                  .toLowerCase()\n                  .indexOf(option.currentInputValue.toLowerCase());\n\n                if (startIdx !== -1) {\n                  const endIdx = startIdx + option.currentInputValue.length;\n                  match = (\n                    <>\n                      {display.substring(0, startIdx)}\n                      <span data-combobox-text-match className={ccCombobox.textMatch}>\n                        {display.substring(startIdx, endIdx)}\n                      </span>\n                      {display.substring(endIdx)}\n                    </>\n                  );\n                } else {\n                  match = <span>{display}</span>;\n                }\n              } else if (highlightValueMatch) {\n                match = highlightValueMatch(display, value);\n              }\n\n              return (\n                <li\n                  key={option.id}\n                  id={option.id}\n                  role=\"option\"\n                  aria-selected={navigationOption?.id === option.id}\n                  tabIndex={-1}\n                  onClick={() => {\n                    new Promise((res) => res(setNavigationOption(option))).then(\n                      () => {\n                        handleSelect(option);\n                      },\n                    );\n                  }}\n                  className={classNames({\n                    [`${ccCombobox.option} ${OPTION_CLASS_NAME}`]:\n                      true,\n                    [ccCombobox.optionSelected]:\n                      navigationOption?.id === option.id,\n                  })}\n                >\n                  {matchTextSegments || highlightValueMatch ? match : display}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  },\n);\n\nfunction findAndSetActiveOption(\n  e: KeyboardEvent,\n  {\n    setNavigationOption,\n    navigationOption,\n    currentOptions,\n  }: {\n    setNavigationOption: Dispatch<SetStateAction<OptionWithIdAndMatch | null>>;\n    navigationOption: OptionWithIdAndMatch | null;\n    currentOptions: OptionWithIdAndMatch[];\n  },\n): void {\n  e.preventDefault();\n\n  const currIndex = currentOptions.findIndex(\n    (option) => option.id === navigationOption?.id,\n  );\n  const nextIndex = currIndex + 1;\n  const prevIndex = currIndex - 1;\n\n  switch (e.key) {\n    case 'ArrowDown':\n      setNavigationOption(\n        nextIndex > currentOptions.length ? null : currentOptions[nextIndex],\n      );\n      break;\n    case 'ArrowUp':\n      setNavigationOption(\n        prevIndex === -2\n          ? currentOptions[currentOptions.length - 1]\n          : prevIndex < 0\n          ? null\n          : currentOptions[prevIndex],\n      );\n      break;\n    case 'PageUp':\n      setNavigationOption(\n        currIndex - 10 < 0 ? currentOptions[0] : currentOptions[currIndex - 10],\n      );\n      break;\n    case 'PageDown':\n      setNavigationOption(\n        currIndex + 10 > currentOptions.length\n          ? currentOptions[currentOptions.length - 1]\n          : currentOptions[currIndex + 10],\n      );\n      break;\n    case 'Home':\n      setNavigationOption(currentOptions[0]);\n      break;\n    case 'End':\n      setNavigationOption(currentOptions[currentOptions.length - 1]);\n      break;\n  }\n}\n\n// If the clicked element on page is not a child of the container\nfunction handleContainerBlur(\n  e: FocusEvent,\n  setOpen: Dispatch<SetStateAction<boolean>>,\n) {\n  const isClickOutsideContainer = !e.currentTarget.contains(e.relatedTarget);\n\n  if (isClickOutsideContainer) {\n    setOpen(false);\n  }\n}\n\nfunction handleInputBlur(\n  containerRef: MutableRefObject<HTMLDivElement | null>,\n  inputContainerRef: MutableRefObject<HTMLDivElement | null>,\n  e: FocusEvent,\n  setOpen: Dispatch<SetStateAction<boolean>>,\n) {\n  if (!containerRef.current) return;\n\n  const isClickOutsideContainer =\n    !containerRef.current?.contains(e.relatedTarget) ||\n    inputContainerRef.current?.contains(e.relatedTarget);\n\n  if (isClickOutsideContainer) {\n    setOpen(false);\n  }\n}\n"],"names":["createOptionsWithIdAndMatch","options","currentInputValue","option","generateId","getAriaText","value","filteredOptionsByInputValue","pluralResults","i18n","noResults","messages","OPTION_CLASS_NAME","MATCH_SEGMENTS_CLASS_NAME","Combobox","forwardRef","pid","props","forwardRef2","id","useId","listboxId","inputRef","useRef","inputContainerRef","containerRef","activateI18n","enMessages","nbMessages","fiMessages","isOpen","setOpen","useState","navigationOption","setNavigationOption","currentOptions","setCurrentOptions","label","invalid","helpText","placeholder","openOnFocus","selectOnBlur","className","listClassName","disableStaticFiltering","matchTextSegments","children","highlightValueMatch","onSelect","onChange","onFocus","onBlur","optional","rest","navigationValueOrInputValue","useEffect","o","handlekeyDown","e","isNavigationKey","ignoreList","findAndSetActiveOption","handleSelect","input","TextFieldProps","handleInputBlur","node","jsxs","classNames","ccCombobox","handleContainerBlur","jsx","TextField","display","match","startIdx","endIdx","Fragment","res","currIndex","nextIndex","prevIndex","_a","_b"],"mappings":"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"}