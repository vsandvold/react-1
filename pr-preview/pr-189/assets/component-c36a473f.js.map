{"version":3,"file":"component-c36a473f.js","sources":["../../packages/toggle/src/locales/nb/messages.mjs","../../packages/toggle/src/locales/en/messages.mjs","../../packages/toggle/src/locales/fi/messages.mjs","../../packages/toggle/src/component.tsx"],"sourcesContent":["/*eslint-disable*/export const messages=JSON.parse(\"{\\\"toggle.label.optional\\\":\\\"(valgfritt)\\\"}\");","/*eslint-disable*/export const messages=JSON.parse(\"{\\\"toggle.label.optional\\\":\\\"(optional)\\\"}\");","/*eslint-disable*/export const messages=JSON.parse(\"{\\\"toggle.label.optional\\\":\\\"(vapaaehtoinen)\\\"}\");","import React from 'react';\nimport { i18n } from '@lingui/core';\nimport { label as ccLabel, helpText as ccHelpText, toggle as ccToggle } from '@warp-ds/css/component-classes';\nimport { useId } from '../../utils/src/index.js';\nimport { ToggleEntry, ToggleProps } from './props.js';\nimport { classNames } from '@chbphone55/classnames';\nimport { Item } from './item.js';\nimport { messages as nbMessages} from './locales/nb/messages.mjs';\nimport { messages as enMessages} from './locales/en/messages.mjs';\nimport { messages as fiMessages} from './locales/fi/messages.mjs';\nimport { activateI18n } from '../../i18n.js';\n\nfunction Title({ id, isInvalid, title, optional }) {\n  activateI18n(enMessages, nbMessages, fiMessages);\n\n  return (\n    <legend\n      id={`${id}__title`}\n      className={classNames({\n        [ccLabel.label]: true,\n        [ccLabel.labelInvalid]: isInvalid,\n      })}\n    >\n      {title}\n      {optional && (\n        <span className={ccLabel.optional}>\n          {i18n._(\n            /*i18n*/ {\n              id: 'toggle.label.optional',\n              message: '(optional)',\n              comment: 'Shown behind label when marked as optional',\n            },\n          )}\n        </span>\n      )}\n    </legend>\n  );\n}\n\nfunction HelpText({ isInvalid, helpId, helpText }: any) {\n  return (\n    <div\n      id={helpId}\n      className={classNames({\n        [ccHelpText.helpText]: true,\n        [ccHelpText.helpTextInvalid]: isInvalid\n      })}\n    >\n      {helpText}\n    </div>\n  );\n}\n\nexport function Toggle(props: ToggleProps) {\n  const id = useId();\n  const helpId = props.helpText ? `${id}__hint` : undefined;\n  const isInvalid = props.invalid;\n  const isRadio = props.type === 'radio';\n  const isCheckbox = props.type === 'checkbox';\n  const isRadioButton = props.type === 'radio-button';\n  const isRadioGroup = isRadio || isRadioButton;\n  const isControlled =\n    props.selected !== undefined || props.checked !== undefined;  \n\n  const labelClasses = classNames({\n    [ccToggle.indeterminate]: props.indeterminate,\n    [ccToggle.label]: !isRadioButton,\n    [ccToggle.focusable]: !isRadioButton,\n    [ccToggle.noContent]: !props.indeterminate,\n    [`${ccToggle.radio} ${ccToggle.labelRadioBorder} ${ccToggle.radioChecked}`]: isRadio,\n    [ccToggle.radioInvalid]: isRadio && isInvalid,\n    [`${ccToggle.checkbox} ${ccToggle.labelCheckboxBorder} ${ccToggle.checkboxChecked}`]: isCheckbox,\n    [ccToggle.icon]: isCheckbox && !props.indeterminate,\n    [ccToggle.checkboxInvalid]: isCheckbox && isInvalid,\n    [ccToggle.radioButtonsLabel]: isRadioButton,\n    [ccToggle.radioButtonsLabelSmall]: props.small,\n  });\n  const inputClasses = classNames({\n    [ccToggle.input]: true,\n    [ccToggle.a11y]: true,\n  });\n\n  const wrapperClasses = classNames(props.className, {\n    [ccToggle.wrapper]: true,\n    [`${ccToggle.radioButtons} ${ccToggle.focusableWithin}`]: isRadioButton,\n    [ccToggle.radioButtonsJustified]: props.equalWidth,\n  });\n\n  const groupClasses = classNames({\n    [ccToggle.radioButtonsGroup]: true,\n    [ccToggle.radioButtonsGroupJustified]: props.equalWidth,\n  })\n\n  return (\n    <fieldset\n      role={isRadioGroup ? 'radiogroup' : undefined}\n      aria-invalid={isRadioGroup ? isInvalid : undefined}\n      aria-errormessage={isRadioGroup && isInvalid ? helpId : undefined}\n      aria-describedby={helpId}\n      className={ccToggle.field}\n    >\n      {props.title && (\n        <Title\n          id={id}\n          title={props.title}\n          isInvalid={isInvalid}\n          optional={props.optional}\n        />\n      )}\n      <div\n        className={wrapperClasses}\n      >\n        {!props.options && props.label ? (\n          <Item\n            controlled={isControlled}\n            label={props.label}\n            inputClassName={inputClasses}\n            labelClassName={labelClasses}\n            checked={props.checked}\n            defaultChecked={props.defaultChecked}\n            indeterminate={props.indeterminate}\n            // @ts-ignore TODO: typecheck\n            onChange={(e: boolean) => props.onChange(e)}\n            name={`${id}:toggle`}\n            key={`${id + props.type}`}\n            invalid={isInvalid}\n            helpId={helpId}\n            type={isRadioGroup ? 'radio' : 'checkbox'}\n            noVisibleLabel={props.noVisibleLabel}\n          />\n        ) : (\n          props.options &&\n          props.options.map((option, i) => (\n            <Item\n              controlled={isControlled}\n              checked={props.selected?.some((s) => s.value === option.value)}\n              defaultChecked={props.defaultSelected?.some(\n                (s) => s.value === option.value,\n              )}\n              inputClassName={inputClasses}\n              labelClassName={labelClasses}  \n              groupClassName={groupClasses}  \n              option={option}\n              // @ts-ignore TODO: typecheck\n              onChange={(e: ToggleEntry) => props.onChange(e)}\n              name={`${id}:toggle`}\n              key={`${id + i + props.type}`}\n              invalid={isInvalid}\n              helpId={helpId}\n              type={isRadioGroup ? 'radio' : 'checkbox'}\n              noVisibleLabel={props.noVisibleLabel}\n              multiple\n            />\n          ))\n        )}\n      </div>\n\n      {props.helpText && (\n        <HelpText\n          helpId={helpId}\n          helpText={props.helpText}\n          isInvalid={isInvalid}\n        />\n      )}\n    </fieldset>\n  );\n}\n"],"names":["messages","Title","id","isInvalid","title","optional","activateI18n","enMessages","nbMessages","fiMessages","jsxs","classNames","ccLabel","jsx","i18n","HelpText","helpId","helpText","ccHelpText","Toggle","props","useId","isRadio","isCheckbox","isRadioButton","isRadioGroup","isControlled","labelClasses","ccToggle","inputClasses","wrapperClasses","groupClasses","Item","e","option","i","_a","s","_b"],"mappings":"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"}