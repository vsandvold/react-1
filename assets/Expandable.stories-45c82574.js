import{j as e,g as a,c as re}from"./index-a783ab12.js";import{R as v,r as K}from"./index-b75aab2a.js";import{r as l}from"./index.m-73ef1fbe.js";import{U as le,E as ie}from"./unstyled-heading-fb22e64b.js";import"./item-32509172.js";import"./useId-906286da.js";import"./i18n-ff9a8b3f.js";const de=t=>v.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"none",viewBox:"0 0 16 16",dangerouslySetInnerHTML:{__html:'<title>HÃ¥ndveske</title><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 14.5V3a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v11.5"></path><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12.222 6H3.777a2 2 0 0 0-1.986 1.766l-.53 4.5A2 2 0 0 0 3.25 14.5h9.502a2 2 0 0 0 1.986-2.234l-.53-4.5A2 2 0 0 0 12.222 6Z"></path>'},...t});function n(t){const{children:o,expanded:s=!1,title:i="",info:ce=!1,box:r=!1,bleed:Q=!1,buttonClass:X="",contentClass:Y="",className:ee,onChange:j,chevron:ae=!0,animated:ne,headingLevel:te,...oe}=t,[d,E]=v.useState(s);v.useEffect(()=>{E(s)},[s]);const se=y=>{E(!y),j&&j(!y)};return e.jsxs("div",{...oe,className:l(ee,{[a.expandable]:!0,[a.expandableBox]:r,[a.expandableBleed]:Q}),children:[e.jsx(le,{level:te,children:e.jsx("button",{type:"button","aria-expanded":d,className:l({[X||""]:!0,[a.button]:!0,[a.buttonBox]:r}),onClick:()=>se(d),children:e.jsxs("div",{className:a.title,children:[typeof i=="string"?e.jsx("span",{className:a.titleType,children:i}):i,ae&&e.jsx("div",{className:l({[a.chevron]:!0,[a.chevronExpanded]:d,[a.chevronBox]:r,[a.chevronNonBox]:!r}),children:e.jsx("svg",{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",fill:"none",viewBox:"0 0 16 16",children:e.jsx("path",{stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1.5",d:"M2.5 5.5L8 11l5.5-5.5"})})})]})})}),e.jsx(pe,{animated:ne,stateExpanded:d,children:e.jsx("div",{className:l({[Y||""]:!0,[re.box]:r,[a.paddingTop]:r&&i}),children:o})})]})}function pe({animated:t,stateExpanded:o,children:s}){return t?e.jsx(ie,{show:o,children:s}):e.jsx("div",{className:l({[a.expansion]:!0,[a.expansionNotExpanded]:!o}),"aria-hidden":o?void 0:!0,children:s})}try{n.displayName="Expandable",n.__docgenInfo={description:"",displayName:"Expandable",props:{className:{defaultValue:null,description:"Additional classes to include",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"CSS styles to inline on the component",name:"style",required:!1,type:{name:"CSSProperties"}},bleed:{defaultValue:{value:"false"},description:"Toggles bleed, makes a box full-width on mobile",name:"bleed",required:!1,type:{name:"boolean"}},info:{defaultValue:{value:"false"},description:"Styles the box with light blue color",name:"info",required:!1,type:{name:"boolean"}},expanded:{defaultValue:{value:"false"},description:"The state of the component, either true for expanded or false for closed.",name:"expanded",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Event function to be called any time the component is expanded or closed. Function will be passed a boolean with a value of true if the component is now expanded or false if it is now closed.",name:"onChange",required:!1,type:{name:"((state: boolean) => void)"}},title:{defaultValue:null,description:"Component title. Can be a string or component. Used to display the title value which is always present regardless of whether the component is open or closed.",name:"title",required:!0,type:{name:"ReactNode"}},box:{defaultValue:{value:"false"},description:"Whether to display the component as a padded box or not.",name:"box",required:!1,type:{name:"boolean"}},buttonClass:{defaultValue:null,description:"Additional CSS classes to include on the button part of the component",name:"buttonClass",required:!1,type:{name:"string"}},contentClass:{defaultValue:null,description:"Additional CSS classes to include on the content part of the component",name:"contentClass",required:!1,type:{name:"string"}},chevron:{defaultValue:{value:"true"},description:"Whether to display the chevron on the button part of the component",name:"chevron",required:!1,type:{name:"boolean"}},animated:{defaultValue:{value:"false"},description:"Animate open and close",name:"animated",required:!1,type:{name:"boolean"}},headingLevel:{defaultValue:null,description:`Wrap the toggle button in a heading element with the specified level.
If headingLevel is not specified, the button will not be wrapped by a heading element.`,name:"headingLevel",required:!1,type:{name:"enum",value:[{value:"1"},{value:"2"},{value:"3"},{value:"4"},{value:"5"},{value:"6"}]}}}}}catch{}const ve={title:"Layout/Expandable"},p=()=>e.jsx(n,{title:"This is a title",children:e.jsx("h1",{children:"I am expandable"})}),c=()=>e.jsx(n,{title:"This is a title",box:!0,children:e.jsx("h1",{children:"I am expandable"})}),u=()=>e.jsx(n,{title:e.jsxs("div",{className:"flex flex-row items-center",children:[e.jsx(de,{}),e.jsx("p",{className:"ml-8 mb-0",children:"This is a title with an icon"})]}),box:!0,info:!0,children:e.jsx("h1",{children:"I am expandable"})}),m=()=>e.jsx(n,{title:"This is a title",box:!0,info:!0,children:e.jsx("h1",{children:"I am expandable"})}),h=()=>{const[t,o]=K.useState(!1);return e.jsx(n,{title:t?"Open":"Closed",box:!0,info:!0,onChange:o,children:e.jsx("h1",{children:"I am expandable"})})},x=()=>{const[t,o]=K.useState(!1);return e.jsx(n,{title:t?"Open":"Closed",box:!0,info:!0,chevron:!1,onChange:o,children:e.jsx("h1",{children:"I am expandable"})})},b=()=>e.jsx(n,{title:"Animated box",box:!0,info:!0,animated:!0,children:e.jsx("h1",{children:"I am expandable"})}),f=()=>e.jsx(n,{title:"Animated box",expanded:!0,box:!0,info:!0,animated:!0,children:e.jsx("h1",{children:"I am expandable"})}),g=()=>e.jsx(n,{title:"I'm also a heading",headingLevel:1,children:e.jsx("h1",{children:"I am expandable"})});var C,w,I;p.parameters={...p.parameters,docs:{...(C=p.parameters)==null?void 0:C.docs,source:{originalSource:`() => <Expandable title="This is a title">
    <h1>I am expandable</h1>
  </Expandable>`,...(I=(w=p.parameters)==null?void 0:w.docs)==null?void 0:I.source}}};var S,N,B;c.parameters={...c.parameters,docs:{...(S=c.parameters)==null?void 0:S.docs,source:{originalSource:`() => <Expandable title="This is a title" box>
    <h1>I am expandable</h1>
  </Expandable>`,...(B=(N=c.parameters)==null?void 0:N.docs)==null?void 0:B.source}}};var k,A,T;u.parameters={...u.parameters,docs:{...(k=u.parameters)==null?void 0:k.docs,source:{originalSource:`() => <Expandable title={<div className="flex flex-row items-center">
        <IconBag16 />
        <p className="ml-8 mb-0">This is a title with an icon</p>
      </div>} box info>
    <h1>I am expandable</h1>
  </Expandable>`,...(T=(A=u.parameters)==null?void 0:A.docs)==null?void 0:T.source}}};var V,q,_;m.parameters={...m.parameters,docs:{...(V=m.parameters)==null?void 0:V.docs,source:{originalSource:`() => <Expandable title="This is a title" box info>
    <h1>I am expandable</h1>
  </Expandable>`,...(_=(q=m.parameters)==null?void 0:q.docs)==null?void 0:_.source}}};var L,O,H;h.parameters={...h.parameters,docs:{...(L=h.parameters)==null?void 0:L.docs,source:{originalSource:`() => {
  const [open, setOpen] = React.useState(false);
  return <Expandable title={open ? 'Open' : 'Closed'} box info onChange={setOpen}>
      <h1>I am expandable</h1>
    </Expandable>;
}`,...(H=(O=h.parameters)==null?void 0:O.docs)==null?void 0:H.source}}};var R,W,M;x.parameters={...x.parameters,docs:{...(R=x.parameters)==null?void 0:R.docs,source:{originalSource:`() => {
  const [open, setOpen] = React.useState(false);
  return <Expandable title={open ? 'Open' : 'Closed'} box info chevron={false} onChange={setOpen}>
      <h1>I am expandable</h1>
    </Expandable>;
}`,...(M=(W=x.parameters)==null?void 0:W.docs)==null?void 0:M.source}}};var U,D,F;b.parameters={...b.parameters,docs:{...(U=b.parameters)==null?void 0:U.docs,source:{originalSource:`() => {
  return <Expandable title="Animated box" box info animated>
      <h1>I am expandable</h1>
    </Expandable>;
}`,...(F=(D=b.parameters)==null?void 0:D.docs)==null?void 0:F.source}}};var P,Z,$;f.parameters={...f.parameters,docs:{...(P=f.parameters)==null?void 0:P.docs,source:{originalSource:`() => {
  return <Expandable title="Animated box" expanded box info animated>
      <h1>I am expandable</h1>
    </Expandable>;
}`,...($=(Z=f.parameters)==null?void 0:Z.docs)==null?void 0:$.source}}};var z,G,J;g.parameters={...g.parameters,docs:{...(z=g.parameters)==null?void 0:z.docs,source:{originalSource:`() => {
  return <Expandable title="I'm also a heading" headingLevel={1}>
      <h1>I am expandable</h1>
    </Expandable>;
}`,...(J=(G=g.parameters)==null?void 0:G.docs)==null?void 0:J.source}}};const je=["Default","Box","BoxWithCustomIcon","InfoBox","Controlled","NoChevron","Animated","AnimatedExpanded","Heading"];export{b as Animated,f as AnimatedExpanded,c as Box,u as BoxWithCustomIcon,h as Controlled,p as Default,g as Heading,m as InfoBox,x as NoChevron,je as __namedExportsOrder,ve as default};
//# sourceMappingURL=Expandable.stories-45c82574.js.map
