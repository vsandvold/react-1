{"version":3,"file":"TextArea.stories-55d014d2.js","sources":["../../packages/textarea/src/useTextAreaHeight.ts","../../packages/textarea/src/locales/nb/messages.mjs","../../packages/textarea/src/locales/en/messages.mjs","../../packages/textarea/src/locales/fi/messages.mjs","../../packages/textarea/src/component.tsx"],"sourcesContent":["import { useLayoutEffect } from '../../utils/src';\nimport React, { useEffect, useRef } from 'react';\n\ntype Params = {\n  ref: React.RefObject<HTMLTextAreaElement>;\n  value?: string;\n  /** The minimum number of rows of text to display */\n  minimumRows?: number;\n  /** The maximum number of rows of text to display */\n  maximumRows?: number;\n};\n\nexport default function useTextAreaHeight({\n  ref,\n  value,\n  minimumRows,\n  maximumRows,\n}: Params): void {\n  const minHeight = useRef(-Infinity);\n  const maxHeight = useRef(Infinity);\n\n  const isControlled = value !== undefined;\n\n  function resize(textarea: HTMLTextAreaElement) {\n    textarea.style.setProperty('height', 'auto');\n\n    let height = Math.max(minHeight.current, textarea.scrollHeight);\n\n    height = Math.min(maxHeight.current, height);\n\n    textarea.style.setProperty('height', height + 'px');\n  }\n\n  // Calculate the minimum and maximal heights\n  useLayoutEffect(() => {\n    if (ref.current && (minimumRows || maximumRows)) {\n      const style = getComputedStyle(ref.current);\n\n      const lineHeight = parseFloat(style.getPropertyValue('line-height'));\n\n      const topPadding = parseFloat(style.getPropertyValue('padding-top'));\n      const bottomPadding = parseFloat(\n        style.getPropertyValue('padding-bottom'),\n      );\n      const bottomBorder = parseFloat(\n        style.getPropertyValue('border-bottom-width'),\n      );\n      const offset = topPadding + bottomPadding + bottomBorder;\n\n      if (minimumRows) {\n        minHeight.current = lineHeight * minimumRows + offset;\n      }\n      if (maximumRows) {\n        maxHeight.current = lineHeight * maximumRows + offset;\n      }\n    }\n  }, [ref, maximumRows, minimumRows]);\n\n  /**\n   * This handles both the initial sizing and resizing when the value changes for a controlled component\n   */\n  useLayoutEffect(() => {\n    if (ref.current) {\n      resize(ref.current);\n    }\n  }, [ref, value]);\n\n  /**\n   * Resizing for uncontrolled textareas\n   */\n  useEffect(() => {\n    if (!ref.current && isControlled) return;\n\n    const textarea = ref.current as HTMLTextAreaElement;\n\n    const handleInput = () => {\n      resize(textarea);\n    };\n\n    textarea.addEventListener('input', handleInput);\n\n    return () => textarea.removeEventListener('input', handleInput);\n  }, [ref, isControlled]);\n}\n","/*eslint-disable*/export const messages=JSON.parse(\"{\\\"textarea.label.optional\\\":\\\"(valgfritt)\\\"}\");","/*eslint-disable*/export const messages=JSON.parse(\"{\\\"textarea.label.optional\\\":\\\"(optional)\\\"}\");","/*eslint-disable*/export const messages=JSON.parse(\"{\\\"textarea.label.optional\\\":\\\"(valinnainen)\\\"}\");","import React, { forwardRef, useRef } from 'react';\nimport { i18n } from '@lingui/core';\nimport { classNames } from '@chbphone55/classnames';\nimport { input as ccInput, label as ccLabel, helpText as ccHelpText } from '@warp-ds/css/component-classes';\nimport { useId } from '../../utils/src';\nimport { TextAreaProps } from './props';\nimport useTextAreaHeight from './useTextAreaHeight';\nimport { messages as nbMessages} from './locales/nb/messages.mjs';\nimport { messages as enMessages} from './locales/en/messages.mjs';\nimport { messages as fiMessages} from './locales/fi/messages.mjs';\nimport { activateI18n } from '../../i18n';\n/**\n * A textarea component that automatically resizes as content changes.\n */\nexport const TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  (props, forwardRef) => {\n    const {\n      className,\n      disabled,\n      error,\n      helpText,\n      id: providedId,\n      invalid,\n      label,\n      maximumRows,\n      minimumRows,\n      readOnly,\n      style,\n      value,\n      optional,\n      placeholder,\n      ...rest\n    } = props;\n\n    activateI18n(enMessages, nbMessages, fiMessages);\n\n    const id = useId(providedId);\n    const ref = useRef<HTMLTextAreaElement | null>(null);\n\n    const helpId = helpText ? `${id}__hint` : undefined;\n    const isInvalid = invalid ?? error;\n\n    useTextAreaHeight({\n      ref,\n      value,\n      maximumRows,\n      minimumRows,\n    });\n\n    return (\n      <div\n        className={className}\n        style={style}\n      >\n        {label && (\n          <label htmlFor={id} className={classNames({\n            [ccLabel.label]: true,\n            [ccLabel.labelInvalid]: isInvalid\n          })} >\n            {label}\n            {optional && (\n              <span className={ccLabel.optional}>\n                {i18n._(\n                  /*i18n*/ {\n                    id: 'textarea.label.optional',\n                    message: '(optional)',\n                    comment: 'Shown behind label when marked as optional',\n                  },\n                )}\n              </span>\n            )}\n          </label>\n        )}\n        <textarea\n          className={classNames({\n            [`${ccInput.default} ${ccInput.textArea}`]: true,\n            [ccInput.placeholder]: !!placeholder,\n            [ccInput.invalid]: isInvalid,\n            [ccInput.disabled]: disabled,\n            [ccInput.readOnly]: readOnly,\n          })}\n          {...rest}\n          placeholder={placeholder}\n          aria-describedby={helpId}\n          aria-errormessage={isInvalid && helpId ? helpId : undefined}\n          aria-invalid={isInvalid}\n          disabled={disabled}\n          id={id}\n          // Support both our own ref and any forwarded ref\n          ref={(node) => {\n            ref.current = node;\n            if (forwardRef) {\n              if (typeof forwardRef === 'function') {\n                forwardRef(node);\n              } else {\n                forwardRef.current = node;\n              }\n            }\n          }}\n          readOnly={readOnly}\n          value={value}\n        />\n        {helpText && <div \n          className={classNames({\n            [ccHelpText.helpText]: true,\n            [ccHelpText.helpTextInvalid]: isInvalid\n          })}\n          >{helpText}</div>}\n      </div>\n    );\n  },\n);\n"],"names":["useTextAreaHeight","ref","value","minimumRows","maximumRows","minHeight","useRef","maxHeight","isControlled","resize","textarea","height","useLayoutEffect","style","lineHeight","topPadding","bottomPadding","bottomBorder","offset","useEffect","handleInput","messages","TextArea","forwardRef","props","forwardRef2","className","disabled","error","helpText","providedId","invalid","label","readOnly","optional","placeholder","rest","activateI18n","enMessages","nbMessages","fiMessages","id","useId","helpId","isInvalid","jsxs","classNames","ccLabel","jsx","i18n","ccInput","node","ccHelpText"],"mappings":"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"}